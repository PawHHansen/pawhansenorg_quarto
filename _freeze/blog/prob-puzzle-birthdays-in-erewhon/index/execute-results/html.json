{
  "hash": "2ad797c0a42f28f33a5dd750af8c0966",
  "result": {
    "markdown": "---\ntitle: \"Summer Simulations: Optimizing the Number of Factory Workers in Erewhon\"\nauthor: \"Paw Hansen\"\ndate: '2024-06-11'\ncategories: [statistical analysis]\nimage: featured.jpg\ndescription: \"Use tidy simulation to solve an optimization puzzle in R!\"\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Packages used in this post\"}\nlibrary(tidyverse)\nlibrary(cowplot)\nlibrary(kableExtra)\ntheme_set(theme_minimal_grid())\n```\n:::\n\n\nAs summer approaches, I found the time to write up a brief post on the \"factory workers in Erewhon\" problem - another classic probability puzzle.\n\nThe puzzle is as follows: Labor laws in Erewhon require factory owners to give every worker a holiday whenever one of them has a birthday, and they must hire without discrimination based on birthdays. Except for these holidays, they work a 365-day year. The owners want to maximize the expected total number of man-days worked per year in a factory. How many workers should the factories in Erewhon employ?\n\n### Simulating One Year of Birthdays in a Single Factory\nTo tackle this problem, we start by writing a function to simulate a single year. For our case in Erewhon, the function might look something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nsimulate_one_year <- function(n_workers) {\n  \n  # Calculate the number of holidays for a year with n_workers\n  # replace = TRUE because workers may share birthdays\n  n_holidays <- length(unique(sample(1:365, n_workers, replace = T)))\n  \n  # Number of work days = # Days in year - # holidays \n  n_work_days <- 365 - n_holidays\n  \n  # And then the man-days...\n  man_days <- n_work_days * n_workers\n  \n  return(man_days)\n  \n}\n```\n:::\n\n\nThis function takes the number of workers in a given factory as input, simulates the occurrence of birthdays in a year, and uses that to calculate the resulting man-days.\n\nLet's ensure it works by trying it with 10 workers:\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nsimulate_one_year(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3550\n```\n:::\n:::\n\n\nThe function returns 3,550 man-days. Now, let's optimize this to find the ideal number of workers for maximizing man-days in a factory.\n\n### Running the Function Multiple Times\nWe'll use crossing to create a combination of trials (simulations) and the number of workers:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nset.seed(25062024)\n\nsims <- \n  crossing(trial = 1:1000, \n         n_workers = seq(1, 500, 1)) |> \n  mutate(man_days = map_dbl(n_workers, ~ simulate_one_year(.)))\n```\n:::\n\n\nThe function takes a little time to run. Afterward, we can calculate the results:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nsims_rs <- \n  sims |> \n  group_by(n_workers) |> \n  summarise(avg_workdays = mean(man_days)) |> \n  arrange(desc(avg_workdays))\n```\n:::\n\n::: {#tbl-n-workers .cell tbl-cap='Resulting man-hour for selected number of factory workers in Erewhon'}\n\n```{.r .cell-code}\nsims_rs |> \n  head() |> \n  kbl(col.names = c(\"Number of workers\", \"Resulting man-days\"), \n      format.args = list(big.mark = ','))\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> Number of workers </th>\n   <th style=\"text-align:right;\"> Resulting man-days </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 376 </td>\n   <td style=\"text-align:right;\"> 49,063.86 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 363 </td>\n   <td style=\"text-align:right;\"> 49,038.03 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 358 </td>\n   <td style=\"text-align:right;\"> 49,037.41 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 380 </td>\n   <td style=\"text-align:right;\"> 49,018.48 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 351 </td>\n   <td style=\"text-align:right;\"> 49,015.75 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 383 </td>\n   <td style=\"text-align:right;\"> 49,006.38 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\nOur simulation analysis suggests that the optimal number of workers is around 376, which is close to the true number of 364/365 found using calculus. Depending on the desired level of precision, our estimate might be good enough. Simulation has brought us close without needing to delve into complex probability theory.\n\nWe can also visualize our results:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsims_rs |> \n  ggplot(aes(n_workers, avg_workdays)) + \n  geom_line(linewidth = 1, color = \"firebrick\") +\n  scale_y_continuous(labels = scales::comma) + \n  labs(title = \"Factories in Erewhon have about 365 workers\",\n       x = \"Number of workers\",\n       y = \"Number of man-days\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nAnd say we wanted to calculate confidence intervals for the number of man-days provided the 365 optimal number of factory workers\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nset.seed(25062024)\nsims_2 <- \n  tibble(\n    man_days = replicate(1000, simulate_one_year(365)) \n  )\n\nquantile(sims_2$man_days, probs = c(0.025, .5, 0.975 ))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n 2.5%   50% 97.5% \n44895 48910 53290 \n```\n:::\n:::\n\n\nLikewise, we could plot the uncertainty using a histogram: \n\n::: {.cell}\n\n```{.r .cell-code}\nsims_2 |> \n  ggplot(aes(man_days)) + \n  geom_histogram(fill = \"firebrick\", color = \"white\") + \n  geom_vline(xintercept = mean(sims_2$man_days), lty = 2, linewidth = 1) + \n  labs(x = \"Man-Days\",\n       y = \"Frequency\") \n```\n\n::: {.cell-output-display}\n![Distribution of Man-Days for Optimal Number of Workers (i.e. 365)](index_files/figure-html/fig-manday-hist-1.png){#fig-manday-hist width=672}\n:::\n:::\n\n\nA final note: We could also have calculated the expected number of man-hours using calculus and probability theory (you can look up the formulas online, just type \"factories erewhon\"). Let's do that and compare those numbers with our simulations \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ncalc <- \n  tibble(\n    n_workers = seq(1, 500, 1), \n    calc_workers = n_workers * 365 * (364/365)^n_workers\n  )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsims_rs |> \n  ggplot(aes(n_workers, avg_workdays)) + \n  geom_point(data = calc, aes(n_workers, calc_workers), color = \"steelblue\", size = .05) + \n  geom_line(linewidth = 1, color = \"firebrick\", alpha = .9) +\n  scale_y_continuous(labels = scales::comma) + \n  labs(x = \"Number of workers\",\n       y = \"Number of man-days\")\n```\n\n::: {.cell-output-display}\n![Comparing simulations (red line) to calculus (blue dots)](index_files/figure-html/fig-calc-v-sims-1.png){#fig-calc-v-sims width=672}\n:::\n:::\n\n\nAlmost impossible to distinguish! \n\n### Conclusion\nOur simulation has demonstrated that the optimal number of factory workers in Erewhon is approximately 365, balancing the trade-off between birthdays and workdays effectively. This result, derived through simulation, closely aligns with the theoretical maximum obtained using calculus. Simulation provides an accessible and intuitive approach to solving complex probability problems, making it an invaluable tool for decision-making in uncertain scenarios.\n\nBy employing the tidyverse suite in R, we've not only solved a fascinating probability puzzle but also showcased the power of simulations in optimizing real-world decisions. Whether youâ€™re a factory owner in Erewhon or tackling a different optimization problem, simulations can provide clear insights and guide you to the best outcomes.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}