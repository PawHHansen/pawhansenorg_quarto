{"title":"The policy evaluator’s toolbox: Plotting results from randomized experiments","markdown":{"yaml":{"title":"The policy evaluator’s toolbox: Plotting results from randomized experiments","author":"","date":"2023-05-24","slug":[],"categories":["statistical analysis"],"tags":[],"subtitle":"Sensible out-of-the-box plots for your next completely randomized experiment.","excerpt":"Sensible out-of-the-box plots for your next completely randomized experiment.","draft":"no","series":null,"layout":"single","editor_options":{"chunk_output_type":"console"}},"headingText":"Packages we'll be using","containsRefs":false,"markdown":"\n\n\n\nIn this series of blog posts, I go over some of the most common experimental designs, including natural experiments such as difference-in-difference, regression discontinuity designs, and so on. The goal is to provide you with some sensible default plots you can use when writing up your next experimental analysis. For more detail on the technicalities of the individual designs, check out the sources I link to at the bottom of this post. \n\n\n```r\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(kableExtra)\nlibrary(ggsci)\n\ntheme_set(theme_minimal(base_size = 12))\n```\n\n\nWhat better way to kick off a series on experimental designs than the one-and-only  randomized experiment. To get started, I'll simulate some fake data we can work with. \n\n\n```r\nset.seed(1234)\nn <- 1000\n\ndat <-\n  tibble(\n  treat = sample(c(0, 1),n, replace = T),\n  covariate = runif(n, 0, 5),\n  outcome = 25 + 2.5 * treat + 1.5* covariate + 0.5 * (treat * covariate) + rnorm(n, 0, 4)\n) %>%\n  mutate(treat = ifelse(treat == 0, \"Control\", \"Treatment\"))\n```\n\n### Plot 1: Difference-in-means\nTo get started, we'll make a simple graph of the two treatment groups and use OLS to calculate the unadjusted difference-in-means: \n\n\n```r\nmeans <-\n  dat %>%\n  group_by(treat) %>%\n  summarise(avg = mean(outcome),\n            sd = sd(outcome)) \n\navg_control <-\n  means %>%\n  filter(treat == \"Control\") %>%\n  select(avg)\n\ndat %>%\n  ggplot(aes(treat, outcome)) +\n  geom_jitter(aes(color = treat), alpha = .4) +\n  geom_hline(yintercept = avg_control$avg, linetype = \"dashed\", color = \"grey50\") +\n  geom_pointrange(data = means, aes(x = treat, \n                                    y = avg, \n                                    ymin = avg + sd, \n                                    ymax = avg - sd)) +\n  labs(color = \"Condition\", \n       x = NULL, \n       y = \"Outcome\") +\n  scale_color_brewer(palette = \"Set1\") +\n  theme(legend.position = \"none\")\n```\n\n<div class=\"figure\">\n<img src=\"{{< blogdown/postref >}}index_files/figure-html/unnamed-chunk-3-1.png\" alt=\"Outcome across experimental conditions\" width=\"672\" />\n<p class=\"caption\"><span id=\"fig:unnamed-chunk-3\"></span>Figure 1: Outcome across experimental conditions</p>\n</div>\n\nThis is good place to start for most basic experimental designs. The graph reveals all of the data as well as the key model parameters, which in this case is simply the two group means. Assuming all of the usual assumptions hold, the difference between these two means represent the average treatment effect. \n\n### Plot 2: Interactions with covariates \n\nConsider a slightly more complicated example where the treatment effect is moderated by some covariate. For example, if the outcome were students’ test scores and the treatment meant being assigned to a tailored learning programme, then parents’ socio-economic resources might interact with how effective the treatment was. \n\nTo plot this, we first complicate the model slightly to take interactions into account:  \n\n\n```r\nlm_mod <-\n  lm(outcome ~ treat + covariate + treat*covariate, data = dat) \n```\n\nTo make our plot, we want the predictions for each condition (treatment/control) depending on the level of the covariate. \n\nWe first set up a data frame using `crossing()`: \n\n\n\n```r\npred_dat <-\n  crossing(treat = c(\"Control\", \"Treatment\"), \n           covariate = seq(min(dat$covariate), max(dat$covariate), by = .25)\n           )\n```\n\n\nThen we can use `augment()` to calculate the predictions: \n\n\n```r\npreds <-\n  augment(lm_mod, \n        newdata = pred_dat,\n        se_fit = T,\n        interval = \"confidence\")\n```\n\nAnd with those predictions, we can make the plot: \n\n\n```r\npred_labels <-\n  tibble(treat = c(\"Control\", \"Treatment\"),\n         covariate = c(4, 3),\n         .fitted = c(28.5, 36))\n\npreds %>%\n  ggplot(aes(covariate, .fitted, color = treat)) +\n  geom_line() +\n  geom_line(aes(y = .lower), linetype = \"dashed\", alpha = .4) +\n  geom_line(aes(y = .upper), linetype = \"dashed\", alpha = .4) +\n  geom_text(data = pred_labels, aes(label = treat)) +\n  labs(color = \"Condition\", \n       x = \"Covariate\", \n       y = \"Outcome\") +\n  scale_color_brewer(palette = \"Set1\") +\n  theme(legend.position = \"none\")\n```\n\n<div class=\"figure\">\n<img src=\"{{< blogdown/postref >}}index_files/figure-html/unnamed-chunk-7-1.png\" alt=\"Outcome across experimental conditions, by covariate\" width=\"672\" />\n<p class=\"caption\"><span id=\"fig:unnamed-chunk-7\"></span>Figure 2: Outcome across experimental conditions, by covariate</p>\n</div>\n\nIn theory, you could also add the raw data to this plot:\n\n\n```r\npreds %>%\n  ggplot(aes(covariate, .fitted, color = treat)) +\n  geom_point(data = dat, aes(x = covariate, y = outcome), alpha = .2) +\n  geom_line() +\n  geom_line(aes(y = .lower), linetype = \"dashed\", alpha = .6) +\n  geom_line(aes(y = .upper), linetype = \"dashed\",  alpha = .6) +\n  labs(color = \"Condition\", \n       x = \"Covariate\", \n       y = \"Outcome\") +\n  scale_color_brewer(palette = \"Set1\") +\n  theme(legend.position = \"bottom\")\n```\n\n<div class=\"figure\">\n<img src=\"{{< blogdown/postref >}}index_files/figure-html/unnamed-chunk-8-1.png\" alt=\"Outcome across experimental conditions, by covariate with data overlaid\" width=\"672\" />\n<p class=\"caption\"><span id=\"fig:unnamed-chunk-8\"></span>Figure 3: Outcome across experimental conditions, by covariate with data overlaid</p>\n</div>\n\nBe careful, though, as the graph quickly gets crammed. Adding emphasis on part of a piece of advice from Kieran Healy: show the data when you can. Use common sense and professional judgment when making up your mind  \n\n### Final thoughts: plotting results from completely randomized experiments\n\nPlotting the results from a completely randomized experiment is usually straightforward. In this post, I have shown you two basic plots that will get you a long way in most analyses. First, whenever possible make sure to plot the data and the fitted model together (Plot 1). Second, when you need to present interactions, do not rely on tables or interaction terms as these are notoriously easy to get wrong. Instead, use your model to generate predictions on the original outcome scale of the data and then plot those predictions (Plot 2). \n\n### Cool! Where can I learn more?\n\n* Coppock, A. (2021). Visualize as you randomize. _Advances in experimental political science_. Cambridge University Press.  \n* Healy, K. (2018). _Data visualization: a practical introduction_. Princeton University Press.\n","srcMarkdownNoYaml":"\n\n\n\nIn this series of blog posts, I go over some of the most common experimental designs, including natural experiments such as difference-in-difference, regression discontinuity designs, and so on. The goal is to provide you with some sensible default plots you can use when writing up your next experimental analysis. For more detail on the technicalities of the individual designs, check out the sources I link to at the bottom of this post. \n\n\n```r\n# Packages we'll be using\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(kableExtra)\nlibrary(ggsci)\n\ntheme_set(theme_minimal(base_size = 12))\n```\n\n\nWhat better way to kick off a series on experimental designs than the one-and-only  randomized experiment. To get started, I'll simulate some fake data we can work with. \n\n\n```r\nset.seed(1234)\nn <- 1000\n\ndat <-\n  tibble(\n  treat = sample(c(0, 1),n, replace = T),\n  covariate = runif(n, 0, 5),\n  outcome = 25 + 2.5 * treat + 1.5* covariate + 0.5 * (treat * covariate) + rnorm(n, 0, 4)\n) %>%\n  mutate(treat = ifelse(treat == 0, \"Control\", \"Treatment\"))\n```\n\n### Plot 1: Difference-in-means\nTo get started, we'll make a simple graph of the two treatment groups and use OLS to calculate the unadjusted difference-in-means: \n\n\n```r\nmeans <-\n  dat %>%\n  group_by(treat) %>%\n  summarise(avg = mean(outcome),\n            sd = sd(outcome)) \n\navg_control <-\n  means %>%\n  filter(treat == \"Control\") %>%\n  select(avg)\n\ndat %>%\n  ggplot(aes(treat, outcome)) +\n  geom_jitter(aes(color = treat), alpha = .4) +\n  geom_hline(yintercept = avg_control$avg, linetype = \"dashed\", color = \"grey50\") +\n  geom_pointrange(data = means, aes(x = treat, \n                                    y = avg, \n                                    ymin = avg + sd, \n                                    ymax = avg - sd)) +\n  labs(color = \"Condition\", \n       x = NULL, \n       y = \"Outcome\") +\n  scale_color_brewer(palette = \"Set1\") +\n  theme(legend.position = \"none\")\n```\n\n<div class=\"figure\">\n<img src=\"{{< blogdown/postref >}}index_files/figure-html/unnamed-chunk-3-1.png\" alt=\"Outcome across experimental conditions\" width=\"672\" />\n<p class=\"caption\"><span id=\"fig:unnamed-chunk-3\"></span>Figure 1: Outcome across experimental conditions</p>\n</div>\n\nThis is good place to start for most basic experimental designs. The graph reveals all of the data as well as the key model parameters, which in this case is simply the two group means. Assuming all of the usual assumptions hold, the difference between these two means represent the average treatment effect. \n\n### Plot 2: Interactions with covariates \n\nConsider a slightly more complicated example where the treatment effect is moderated by some covariate. For example, if the outcome were students’ test scores and the treatment meant being assigned to a tailored learning programme, then parents’ socio-economic resources might interact with how effective the treatment was. \n\nTo plot this, we first complicate the model slightly to take interactions into account:  \n\n\n```r\nlm_mod <-\n  lm(outcome ~ treat + covariate + treat*covariate, data = dat) \n```\n\nTo make our plot, we want the predictions for each condition (treatment/control) depending on the level of the covariate. \n\nWe first set up a data frame using `crossing()`: \n\n\n\n```r\npred_dat <-\n  crossing(treat = c(\"Control\", \"Treatment\"), \n           covariate = seq(min(dat$covariate), max(dat$covariate), by = .25)\n           )\n```\n\n\nThen we can use `augment()` to calculate the predictions: \n\n\n```r\npreds <-\n  augment(lm_mod, \n        newdata = pred_dat,\n        se_fit = T,\n        interval = \"confidence\")\n```\n\nAnd with those predictions, we can make the plot: \n\n\n```r\npred_labels <-\n  tibble(treat = c(\"Control\", \"Treatment\"),\n         covariate = c(4, 3),\n         .fitted = c(28.5, 36))\n\npreds %>%\n  ggplot(aes(covariate, .fitted, color = treat)) +\n  geom_line() +\n  geom_line(aes(y = .lower), linetype = \"dashed\", alpha = .4) +\n  geom_line(aes(y = .upper), linetype = \"dashed\", alpha = .4) +\n  geom_text(data = pred_labels, aes(label = treat)) +\n  labs(color = \"Condition\", \n       x = \"Covariate\", \n       y = \"Outcome\") +\n  scale_color_brewer(palette = \"Set1\") +\n  theme(legend.position = \"none\")\n```\n\n<div class=\"figure\">\n<img src=\"{{< blogdown/postref >}}index_files/figure-html/unnamed-chunk-7-1.png\" alt=\"Outcome across experimental conditions, by covariate\" width=\"672\" />\n<p class=\"caption\"><span id=\"fig:unnamed-chunk-7\"></span>Figure 2: Outcome across experimental conditions, by covariate</p>\n</div>\n\nIn theory, you could also add the raw data to this plot:\n\n\n```r\npreds %>%\n  ggplot(aes(covariate, .fitted, color = treat)) +\n  geom_point(data = dat, aes(x = covariate, y = outcome), alpha = .2) +\n  geom_line() +\n  geom_line(aes(y = .lower), linetype = \"dashed\", alpha = .6) +\n  geom_line(aes(y = .upper), linetype = \"dashed\",  alpha = .6) +\n  labs(color = \"Condition\", \n       x = \"Covariate\", \n       y = \"Outcome\") +\n  scale_color_brewer(palette = \"Set1\") +\n  theme(legend.position = \"bottom\")\n```\n\n<div class=\"figure\">\n<img src=\"{{< blogdown/postref >}}index_files/figure-html/unnamed-chunk-8-1.png\" alt=\"Outcome across experimental conditions, by covariate with data overlaid\" width=\"672\" />\n<p class=\"caption\"><span id=\"fig:unnamed-chunk-8\"></span>Figure 3: Outcome across experimental conditions, by covariate with data overlaid</p>\n</div>\n\nBe careful, though, as the graph quickly gets crammed. Adding emphasis on part of a piece of advice from Kieran Healy: show the data when you can. Use common sense and professional judgment when making up your mind  \n\n### Final thoughts: plotting results from completely randomized experiments\n\nPlotting the results from a completely randomized experiment is usually straightforward. In this post, I have shown you two basic plots that will get you a long way in most analyses. First, whenever possible make sure to plot the data and the fitted model together (Plot 1). Second, when you need to present interactions, do not rely on tables or interaction terms as these are notoriously easy to get wrong. Instead, use your model to generate predictions on the original outcome scale of the data and then plot those predictions (Plot 2). \n\n### Cool! Where can I learn more?\n\n* Coppock, A. (2021). Visualize as you randomize. _Advances in experimental political science_. Cambridge University Press.  \n* Healy, K. (2018). _Data visualization: a practical introduction_. Princeton University Press.\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","code-summary":"Code","theme":{"light":["litera","../../custom.css"],"dark":["slate","custom.scss"]},"smooth-scroll":true,"title-block-banner":true,"title":"The policy evaluator’s toolbox: Plotting results from randomized experiments","author":"","date":"2023-05-24","slug":[],"categories":["statistical analysis"],"tags":[],"subtitle":"Sensible out-of-the-box plots for your next completely randomized experiment.","excerpt":"Sensible out-of-the-box plots for your next completely randomized experiment.","draft":"no","series":null,"layout":"single","editor_options":{"chunk_output_type":"console"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}